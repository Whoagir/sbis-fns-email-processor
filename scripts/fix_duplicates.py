"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import create_engine, text
from app.config import settings
from app.utils.logger import logger


def fix_duplicates():
    """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏"""

    engine = create_engine(settings.DATABASE_URL)

    try:
        with engine.connect() as conn:
            # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            duplicates_query = text("""
                SELECT external_id, COUNT(*) as count 
                FROM mail_documents 
                GROUP BY external_id 
                HAVING COUNT(*) > 1
            """)

            result = conn.execute(duplicates_query)
            duplicates = result.fetchall()

            if not duplicates:
                logger.info("–î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ
            for external_id, count in duplicates:
                logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è: {external_id} ({count} –∑–∞–ø–∏—Å–µ–π)")

                delete_query = text("""
                    DELETE FROM mail_documents 
                    WHERE external_id = :external_id 
                    AND id NOT IN (
                        SELECT id FROM (
                            SELECT id 
                            FROM mail_documents 
                            WHERE external_id = :external_id 
                            ORDER BY created_at DESC 
                            LIMIT 1
                        ) as latest
                    )
                """)

                conn.execute(delete_query, {"external_id": external_id})

            conn.commit()
            logger.info("–î—É–±–ª–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
        raise


def show_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"""

    engine = create_engine(settings.DATABASE_URL)

    with engine.connect() as conn:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total_query = text("SELECT COUNT(*) FROM mail_documents")
        total = conn.execute(total_query).scalar()

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö external_id
        unique_query = text("SELECT COUNT(DISTINCT external_id) FROM mail_documents")
        unique = conn.execute(unique_query).scalar()

        # –î—É–±–ª–∏–∫–∞—Ç—ã
        duplicates_query = text("""
            SELECT COUNT(*) FROM (
                SELECT external_id 
                FROM mail_documents 
                GROUP BY external_id 
                HAVING COUNT(*) > 1
            ) as dups
        """)
        duplicates = conn.execute(duplicates_query).scalar()

        logger.info(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
        logger.info(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}")
        logger.info(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {unique}")
        logger.info(f"   –ì—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates}")


if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")


    # logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –æ—á–∏—Å—Ç–∫–∏:")
    # show_stats()

    # –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    fix_duplicates()


    # logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï –æ—á–∏—Å—Ç–∫–∏:")
    # show_stats()

    logger.info("–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")