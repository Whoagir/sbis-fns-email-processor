from typing import List, Dict, Any, Optional
from datetime import datetime
from sqlalchemy.orm import Session
from app.models.models import MailDocument
from app.schemas.schemas import MailDocumentCreate
from app.config import settings
from app.utils.logger import logger
from app.services.sbis_client import SBISClient


class FNSFilterService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –§–ù–°"""

    def __init__(self):
        self.last_check = None
        self.processed_documents = set()

    @staticmethod
    def is_from_fns(document_data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç –§–ù–°"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ò–ù–ù –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_inn = document_data.get('sender_inn', '')
        if sender_inn:
            for prefix in settings.FNS_INN_PREFIXES:
                if sender_inn.startswith(prefix):
                    logger.debug(f"Document matches FNS INN prefix: {prefix}")
                    return True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ —Ç–µ–º–µ
        subject = document_data.get('subject', '').lower()
        for keyword in settings.FNS_KEYWORDS:
            if keyword.lower() in subject:
                logger.debug(f"Document matches FNS keyword: {keyword}")
                return True

        return False

    @staticmethod
    def convert_to_schema(document_data: Dict[str, Any]) -> MailDocumentCreate:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å—Ö–µ–º—É"""
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        date_str = document_data.get('date', '')
        parsed_date = None
        if date_str:
            try:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
                for fmt in ['%d.%m.%Y', '%Y-%m-%d', '%d/%m/%Y']:
                    try:
                        parsed_date = datetime.strptime(date_str, fmt)
                        break
                    except ValueError:
                        continue
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É '{date_str}': {e}")
                parsed_date = datetime.now()

        return MailDocumentCreate(
            external_id=document_data.get('external_id', ''),
            date=parsed_date or datetime.now(),
            subject=document_data.get('subject', ''),
            sender_inn=document_data.get('sender_inn', ''),
            sender_name=document_data.get('sender_name', ''),
            filename=document_data.get('filename', ''),
            has_attachment=document_data.get('has_attachment', False)
        )

    @staticmethod
    def process_documents(db: Session, documents_data: List[Dict[str, Any]]) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ë–î"""
        total_count = len(documents_data)
        fns_count = 0
        new_count = 0

        try:
            for doc_data in documents_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
                external_id = doc_data.get('external_id', '')
                if db.query(MailDocument).filter_by(external_id=external_id).first():
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç –§–ù–° –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
                is_fns = FNSFilterService.is_from_fns(doc_data)
                if is_fns:
                    fns_count += 1

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ö–µ–º—É
                doc_schema = FNSFilterService.convert_to_schema(doc_data)

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
                db_document = MailDocument(
                    external_id=doc_schema.external_id,
                    date=doc_schema.date,
                    subject=doc_schema.subject,
                    sender_inn=doc_schema.sender_inn,
                    sender_name=doc_schema.sender_name,
                    filename=doc_schema.filename,
                    has_attachment=doc_schema.has_attachment,
                    is_from_fns=is_fns
                )

                db.add(db_document)
                new_count += 1

            db.commit()
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_count} –≤—Å–µ–≥–æ, {fns_count} –æ—Ç –§–ù–°, {new_count} –Ω–æ–≤—ã—Ö")

        except Exception as e:
            db.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}")
            raise

        return {
            "total_documents": total_count,
            "fns_documents": fns_count,
            "new_documents": new_count
        }

    async def get_and_process_fns_documents(self, db: Session, days_back: Optional[int] = None) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –§–ù–° –∏–∑ –°–ë–ò–°"""
        days_back = days_back or settings.DOCUMENTS_PERIOD_DAYS

        try:
            async with SBISClient() as client:
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç –§–ù–°
                fns_documents = await client.get_fns_documents(days_back)

                if not fns_documents:
                    logger.info("–î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç –§–ù–° –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return {
                        "total_documents": 0,
                        "fns_documents": 0,
                        "new_documents": 0
                    }

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                result = self.process_documents(db, fns_documents)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.last_check = datetime.now()

                return result

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –§–ù–°: {str(e)}")
            return {
                "total_documents": 0,
                "fns_documents": 0,
                "new_documents": 0,
                "error": str(e)
            }

    def format_documents_table(self, documents: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        if not documents:
            return "–î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç –§–ù–° –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

        table = "üìã –î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç –§–ù–°:\n"
        table += "=" * 80 + "\n"
        table += f"{'–î–∞—Ç–∞':<12} {'–¢–µ–º–∞':<30} {'–ò–ù–ù –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è':<15} {'–í–ª–æ–∂–µ–Ω–∏—è':<10}\n"
        table += "-" * 80 + "\n"

        for doc in documents:
            date = doc.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')[:10]
            title = doc.get('subject', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:28]
            sender_inn = doc.get('sender_inn', '–ù–µ —É–∫–∞–∑–∞–Ω')[:13]
            has_attachments = "–î–∞" if doc.get('has_attachment', False) else "–ù–µ—Ç"

            table += f"{date:<12} {title:<30} {sender_inn:<15} {has_attachments:<10}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
            attachments = doc.get('attachments', [])
            if attachments:
                for attachment in attachments[:3]:
                    table += f"{'':>12} üìé {attachment}\n"
                if len(attachments) > 3:
                    table += f"{'':>12} ... –∏ –µ—â–µ {len(attachments) - 3} —Ñ–∞–π–ª–æ–≤\n"

        table += "=" * 80 + "\n"
        return table


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
fns_service = FNSFilterService()
# –ê–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
FNSFilter = FNSFilterService