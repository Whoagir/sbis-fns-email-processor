import os
import sys
from datetime import datetime, timedelta
from typing import List, Dict, Any
import asyncio
from celery import Celery
from celery.schedules import crontab
from sqlalchemy.orm import Session

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.config import settings
from app.database import SessionLocal
from app.services.sbis_client import SBISClient
from app.services.fns_filter import FNSFilter
from app.utils.logger import get_logger
from app.models.models import MailDocument, ProcessingLog

logger = get_logger(__name__)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Celery
celery_app = Celery(
    'fns_monitor',
    broker=settings.REDIS_URL,
    backend=settings.REDIS_URL,
    include=['app.tasks.celery_tasks']
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery
celery_app.conf.update(
    task_serializer='json',
    accept_content=['json'],
    result_serializer='json',
    timezone='Europe/Moscow',
    enable_utc=True,
    task_track_started=True,
    task_time_limit=30 * 60,  # 30 –º–∏–Ω—É—Ç
    task_soft_time_limit=25 * 60,  # 25 –º–∏–Ω—É—Ç
    worker_prefetch_multiplier=1,
    task_acks_late=True,
    worker_max_tasks_per_child=1000,
)

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á
celery_app.conf.beat_schedule = {
    'check-fns-mails-every-5-minutes': {
        'task': 'app.tasks.celery_tasks.check_fns_mails',
        'schedule': crontab(minute='*/5'),  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        'options': {'queue': 'celery'}
    },
    'check-fns-documents-daily': {
        'task': 'app.tasks.celery_tasks.check_fns_documents',
        'schedule': crontab(hour=9, minute=0),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
        'options': {'queue': 'celery'}
    },
}

celery_app.conf.task_routes = {
    'app.tasks.celery_tasks.check_fns_mails': {'queue': 'celery'},
    'app.tasks.celery_tasks.check_fns_documents': {'queue': 'celery'},
    'app.tasks.celery_tasks.get_fns_documents_manual': {'queue': 'celery'},
    'app.tasks.celery_tasks.check_all_documents_task': {'queue': 'celery'},
    'app.tasks.celery_tasks.test_task': {'queue': 'celery'},
}


def get_database_session() -> Session:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Celery –∑–∞–¥–∞—á"""
    db = SessionLocal()
    try:
        return db
    except Exception as e:
        db.close()
        raise e


@celery_app.task(bind=True)
def test_task(self):
    """–ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞"""
    logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏")
    return {"status": "success", "message": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", "timestamp": str(datetime.now())}


@celery_app.task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 3, 'countdown': 60})
def check_fns_mails(self):
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –§–ù–° —á–µ—Ä–µ–∑ –°–ë–ò–°")

    db = None
    task_id = self.request.id

    try:
        from app.models.models import MailDocument, ProcessingLog

        db = get_database_session()

        log_entry = ProcessingLog(
            task_id=task_id,
            status="processing"
        )
        db.add(log_entry)
        db.commit()

        # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SBISClient
        async def get_fns_docs():
            async with SBISClient() as sbis_client:
                if not await sbis_client.authenticate():
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –°–ë–ò–°")
                    return None
                return await sbis_client.get_fns_documents(days_back=settings.DOCUMENTS_PERIOD_DAYS)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        fns_documents = asyncio.run(get_fns_docs())

        if fns_documents is None:
            log_entry.status = "error"
            log_entry.error_message = "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –°–ë–ò–°"
            db.commit()
            return {"status": "error", "message": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –°–ë–ò–°"}

        if not fns_documents:
            logger.info("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –§–ù–° –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            log_entry.status = "success"
            log_entry.total_documents = 0
            log_entry.fns_documents = 0
            db.commit()
            return {"status": "success", "message": "–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –§–ù–° –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", "count": 0}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        new_documents_count = 0
        for doc in fns_documents:
            existing_doc = db.query(MailDocument).filter(
                MailDocument.external_id == doc.get('external_id', '')
            ).first()

            if not existing_doc:
                mail_doc = MailDocument(
                    external_id=doc.get('external_id', ''),
                    date=doc.get('date', datetime.now()),
                    subject=doc.get('subject', ''),
                    sender_inn=doc.get('sender_inn', ''),
                    sender_name=doc.get('sender_name', ''),
                    filename=doc.get('filename', ''),
                    has_attachment=doc.get('has_attachment', False),
                    is_from_fns=True
                )
                db.add(mail_doc)
                new_documents_count += 1

        db.commit()

        log_entry.status = "success"
        log_entry.total_documents = len(fns_documents)
        log_entry.fns_documents = len(fns_documents)
        db.commit()

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(fns_documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –§–ù–°, –Ω–æ–≤—ã—Ö: {new_documents_count}")

        return {
            "status": "success",
            "message": f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(fns_documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –§–ù–°",
            "total_count": len(fns_documents),
            "new_count": new_documents_count,
            "task_id": task_id
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ check_fns_mails: {str(e)}")
        if db:
            db.rollback()
            try:
                from app.models.models import ProcessingLog
                log_entry = db.query(ProcessingLog).filter(ProcessingLog.task_id == task_id).first()
                if log_entry:
                    log_entry.status = "error"
                    log_entry.error_message = str(e)
                    db.commit()
            except:
                pass
        raise self.retry(exc=e)
    finally:
        if db:
            db.close()


@celery_app.task(bind=True)
def get_fns_documents_manual(self, days: int = 7):
    """
    –†—É—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –§–ù–° –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    """
    logger.info(f"–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –§–ù–° –∑–∞ {days} –¥–Ω–µ–π")

    db = None
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        from app.models.models import MailDocument

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = get_database_session()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –°–ë–ò–°
        sbis_client = SBISClient()

        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        if not sbis_client.authenticate():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –°–ë–ò–°")
            return {"status": "error", "message": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –°–ë–ò–°"}

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days)

        documents = sbis_client.get_inbox_documents(
            start_date=start_date,
            end_date=end_date
        )

        if not documents:
            return {"status": "success", "message": "–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", "documents": []}

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç –§–ù–°
        fns_filter = FNSFilter()
        fns_documents = fns_filter.filter_fns_documents(documents)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_documents = []
        for doc in fns_documents:
            result_documents.append({
                "date": doc.get('date', '').strftime('%Y-%m-%d %H:%M:%S') if doc.get('date') else '',
                "subject": doc.get('subject', ''),
                "sender_inn": doc.get('sender', {}).get('inn', ''),
                "sender_name": doc.get('sender', {}).get('name', ''),
                "has_attachments": bool(doc.get('attachments', [])),
                "attachment_names": [att.get('name', '') for att in doc.get('attachments', [])]
            })

        logger.info(f"–†—É—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ {len(fns_documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –§–ù–°")

        return {
            "status": "success",
            "message": f"–ù–∞–π–¥–µ–Ω–æ {len(fns_documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –§–ù–° –∑–∞ {days} –¥–Ω–µ–π",
            "count": len(fns_documents),
            "documents": result_documents
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ get_fns_documents_manual: {str(e)}")
        return {"status": "error", "message": f"–û—à–∏–±–∫–∞: {str(e)}"}
    finally:
        if db:
            db.close()


# –î–æ–±–∞–≤—å —ç—Ç—É –∑–∞–¥–∞—á—É –≤ celery_tasks.py

@celery_app.task(bind=True, autoretry_for=(Exception,), retry_kwargs={'max_retries': 3, 'countdown': 60})
def check_all_documents_task(self, days_back: int = 3650):
    """
    Celery –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥

    Args:
        days_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –ª–µ—Ç)
    """
    logger.info(f"üöÄ Celery: –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞ {days_back} –¥–Ω–µ–π")

    db = None
    task_id = self.request.id

    try:
        from app.models.models import MailDocument, ProcessingLog

        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        db = get_database_session()

        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥
        log_entry = ProcessingLog(
            task_id=task_id,
            status="processing"
        )
        db.add(log_entry)
        db.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        self.update_state(
            state='PROGRESS',
            meta={'status': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –°–ë–ò–°...', 'progress': 10}
        )

        # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        async def get_all_fns_docs():
            async with SBISClient() as sbis_client:
                if not await sbis_client.authenticate():
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –°–ë–ò–°")
                    return None

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                self.update_state(
                    state='PROGRESS',
                    meta={'status': '–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –°–ë–ò–°...', 'progress': 30}
                )

                return await sbis_client.get_fns_documents(days_back=days_back)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        fns_documents = asyncio.run(get_all_fns_docs())

        if fns_documents is None:
            log_entry.status = "error"
            log_entry.error_message = "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –°–ë–ò–°"
            db.commit()
            return {"status": "error", "message": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –°–ë–ò–°"}

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.update_state(
            state='PROGRESS',
            meta={'status': '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...', 'progress': 60}
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        new_documents_count = 0
        total_processed = 0

        for i, doc in enumerate(fns_documents):
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            if i % 100 == 0:
                progress = 60 + (i / len(fns_documents)) * 30  # –æ—Ç 60% –¥–æ 90%
                self.update_state(
                    state='PROGRESS',
                    meta={
                        'status': f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{len(fns_documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...',
                        'progress': int(progress)
                    }
                )

            existing_doc = db.query(MailDocument).filter(
                MailDocument.external_id == doc.get('external_id', '')
            ).first()

            if not existing_doc:
                mail_doc = MailDocument(
                    external_id=doc.get('external_id', ''),
                    date=doc.get('date', datetime.now()),
                    subject=doc.get('subject', ''),
                    sender_inn=doc.get('sender_inn', ''),
                    sender_name=doc.get('sender_name', ''),
                    filename=doc.get('filename', ''),
                    has_attachment=doc.get('has_attachment', False),
                    is_from_fns=True
                )
                db.add(mail_doc)
                new_documents_count += 1

            total_processed += 1

            # –ö–æ–º–º–∏—Ç–∏–º –∫–∞–∂–¥—ã–µ 500 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            if total_processed % 500 == 0:
                db.commit()

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
        db.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥
        log_entry.status = "success"
        log_entry.total_documents = len(fns_documents)
        log_entry.fns_documents = len(fns_documents)
        db.commit()

        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        self.update_state(
            state='SUCCESS',
            meta={'status': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!', 'progress': 100}
        )

        logger.info(
            f"‚úÖ Celery: –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(fns_documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –Ω–æ–≤—ã—Ö: {new_documents_count}")

        return {
            "status": "success",
            "total_documents": len(fns_documents),
            "new_documents": new_documents_count,
            "days_back": days_back,
            "task_id": task_id,
            "processed_at": datetime.now().isoformat()
        }

    except Exception as e:
        logger.error(f"‚ùå Celery: –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")

        if db:
            db.rollback()
            try:
                log_entry = db.query(ProcessingLog).filter(ProcessingLog.task_id == task_id).first()
                if log_entry:
                    log_entry.status = "error"
                    log_entry.error_message = str(e)
                    db.commit()
            except:
                pass

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
        self.update_state(
            state='FAILURE',
            meta={'status': f'–û—à–∏–±–∫–∞: {str(e)}', 'progress': 100}
        )

        raise self.retry(exc=e)

    finally:
        if db:
            db.close()


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
app = celery_app

if __name__ == '__main__':
    celery_app.start()