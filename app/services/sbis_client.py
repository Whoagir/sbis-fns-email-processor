import aiohttp
import asyncio
from datetime import datetime, timedelta
import logging
from typing import List, Dict, Any, Optional
from app.config import settings


class SBISClient:
    def __init__(self, timeout: int = 30):
        self.login = settings.SBIS_LOGIN
        self.password = settings.SBIS_PASSWORD
        self.auth_url = settings.SBIS_AUTH_URL
        self.service_url = settings.SBIS_SERVICE_URL
        self.timeout = timeout
        self.session = None
        self.session_id = None
        self.logger = logging.getLogger(__name__)

    async def __aenter__(self):
        timeout = aiohttp.ClientTimeout(total=self.timeout)
        self.session = aiohttp.ClientSession(timeout=timeout)
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()

    async def authenticate(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –°–ë–ò–° - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ"""
        auth_data = {
            "jsonrpc": "2.0",
            "method": "–°–ë–ò–°.–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å",
            "params": {"–ü–∞—Ä–∞–º–µ—Ç—Ä": {"–õ–æ–≥–∏–Ω": self.login, "–ü–∞—Ä–æ–ª—å": self.password}},
            "id": 0
        }

        try:
            async with self.session.post(self.auth_url, json=auth_data) as response:
                if response.status != 200:
                    self.logger.error(f"HTTP –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status}")
                    return False

                result = await response.json()

                if 'error' in result:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {result['error']}")
                    return False

                self.session_id = result.get('result')
                if self.session_id:
                    self.logger.info(f"‚úÖ –°–µ—Å—Å–∏—è: {self.session_id[:10]}...")
                    return True

                return False

        except Exception as e:
            self.logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return False

    async def get_documents_raw(self, days_back: int = 7) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ - –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ"""
        if not self.session_id:
            if not await self.authenticate():
                return {}

        # –¢–æ—á–Ω–æ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ
        date_to = datetime.now().strftime("%d.%m.%Y")
        date_from = (datetime.now() - timedelta(days=days_back)).strftime("%d.%m.%Y")

        docs_data = {
            "jsonrpc": "2.0",
            "method": "–°–ë–ò–°.–°–ø–∏—Å–æ–∫–î–æ–∫—É–º–µ–Ω—Ç–æ–≤–ü–æ–°–æ–±—ã—Ç–∏—è–º",
            "params": {
                "–§–∏–ª—å—Ç—Ä": {"–î–∞—Ç–∞–°": date_from, "–î–∞—Ç–∞–ü–æ": date_to, "–¢–∏–ø–†–µ–µ—Å—Ç—Ä–∞": "–í—Ö–æ–¥—è—â–∏–µ"}
            },
            "id": 1
        }

        headers = {"X-SBISSessionID": self.session_id}

        try:
            async with self.session.post(self.service_url, json=docs_data, headers=headers) as response:
                if response.status != 200:
                    error_text = await response.text()
                    self.logger.error(f"HTTP –æ—à–∏–±–∫–∞: {response.status}, {error_text}")
                    return {}

                result = await response.json()

                if 'error' in result:
                    self.logger.error(f"–û—à–∏–±–∫–∞ API: {result['error']}")
                    return {}

                return result

        except Exception as e:
            self.logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}")
            return {}

    def parse_documents(self, raw_result: dict) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å—ã—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ"""
        documents = []

        if not raw_result or 'result' not in raw_result:
            return documents

        result_data = raw_result.get("result", {})
        if "–†–µ–µ—Å—Ç—Ä" not in result_data:
            self.logger.warning("–ù–µ—Ç –ø–æ–ª—è '–†–µ–µ—Å—Ç—Ä' –≤ –æ—Ç–≤–µ—Ç–µ")
            return documents

        registry = result_data["–†–µ–µ—Å—Ç—Ä"]
        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ä–µ–µ—Å—Ç—Ä–µ: {len(registry)}")

        for doc_entry in registry:
            document = doc_entry.get("–î–æ–∫—É–º–µ–Ω—Ç", {})
            if not document:
                continue

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ò–ù–ù –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ
            kontragent = document.get("–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", {})
            inn = None
            if "–°–≤–Æ–õ" in kontragent and "–ò–ù–ù" in kontragent["–°–≤–Æ–õ"]:
                inn = kontragent["–°–≤–Æ–õ"]["–ò–ù–ù"]
            elif "–°–≤–§–õ" in kontragent and "–ò–ù–ù" in kontragent["–°–≤–§–õ"]:
                inn = kontragent["–°–≤–§–õ"]["–ò–ù–ù"]

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
            attachments = document.get("–í–ª–æ–∂–µ–Ω–∏–µ", [])
            attachment_names = []
            if attachments:
                for att in attachments:
                    if isinstance(att, dict) and "–ù–∞–∑–≤–∞–Ω–∏–µ" in att:
                        attachment_names.append(att["–ù–∞–∑–≤–∞–Ω–∏–µ"])

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
            parsed_doc = {
                "external_id": f"{document.get('–î–∞—Ç–∞', '')}_{document.get('–ù–∞–∑–≤–∞–Ω–∏–µ', '')}_{inn or 'no_inn'}",
                "date": document.get("–î–∞—Ç–∞", ""),
                "subject": document.get("–ù–∞–∑–≤–∞–Ω–∏–µ", ""),
                "sender_inn": inn,
                "sender_name": kontragent.get("–ù–∞–∑–≤–∞–Ω–∏–µ", ""),
                "filename": attachment_names[0] if attachment_names else "",
                "has_attachment": len(attachments) > 0,
                "attachments": attachment_names
            }

            documents.append(parsed_doc)

        self.logger.info(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
        return documents

    def filter_fns_documents(self, documents: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –§–ù–° - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ"""
        fns_documents = []

        for doc in documents:
            inn = doc.get("sender_inn", "")
            title = doc.get("subject", "").lower()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ò–ù–ù - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ
            is_fns_by_inn = inn and inn.startswith("77")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ
            keywords = ["—Ñ–Ω—Å", "–Ω–∞–ª–æ–≥–æ–≤–∞—è", "—Å–≤–µ—Ä–∫–∞", "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ"]
            is_fns_by_keywords = any(keyword in title for keyword in keywords)

            if is_fns_by_inn or is_fns_by_keywords:
                fns_documents.append(doc)

        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –§–ù–°: {len(fns_documents)}")
        return fns_documents

    async def get_fns_documents(self, days_back: int = 7) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –§–ù–° - –≥–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            raw_result = await self.get_documents_raw(days_back)
            if not raw_result:
                return []

            # –ü–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
            all_documents = self.parse_documents(raw_result)
            if not all_documents:
                return []

            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç –§–ù–°
            fns_documents = self.filter_fns_documents(all_documents)

            return fns_documents

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –§–ù–°: {str(e)}")
            return []


# –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_sbis_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –°–ë–ò–°...")

    async with SBISClient() as client:
        # –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_success = await client.authenticate()
        print(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if auth_success else '‚ùå –û—à–∏–±–∫–∞'}")

        if not auth_success:
            return

        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        fns_docs = await client.get_fns_documents(days_back=3600)  # –ë–æ–ª—å—à–æ–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∞
        print(f"–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç –§–ù–°: {len(fns_docs)}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–æ–∫—É–º–µ–Ω—Ç–∞
        for i, doc in enumerate(fns_docs[:3]):
            print(f"\n--- –î–æ–∫—É–º–µ–Ω—Ç {i + 1} ---")
            print(f"–î–∞—Ç–∞: {doc.get('date', 'N/A')}")
            print(f"–¢–µ–º–∞: {doc.get('subject', 'N/A')}")
            print(f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å (–ò–ù–ù): {doc.get('sender_inn', 'N/A')}")
            print(f"–§–∞–π–ª: {doc.get('filename', 'N/A')}")
            print(f"–ï—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è: {'–î–∞' if doc.get('has_attachment') else '–ù–µ—Ç'}")


if __name__ == "__main__":
    asyncio.run(test_sbis_integration())