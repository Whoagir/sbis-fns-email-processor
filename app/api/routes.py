from fastapi import APIRouter, Depends, HTTPException, BackgroundTasks, Request
from sqlalchemy.orm import Session
from typing import List, Optional, Dict, Any
from app.database import get_db
from app.models.models import MailDocument, ProcessingLog
from app.schemas.schemas import MailDocument as MailDocumentSchema, ProcessingLogResponse
from app.tasks.celery_tasks import check_fns_mails, celery_app
from app.services.mock_service import MockSBISService
from app.services.fns_filter import FNSFilterService, fns_service
from app.utils.logger import logger
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from datetime import datetime, timedelta
import asyncio
from app.config import settings

templates = Jinja2Templates(directory="templates")
router = APIRouter()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
last_check_time = None
processed_documents_count = 0


# –£—Ç–∏–ª–∏—Ç—ã
async def run_real_check(db: Session):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –°–ë–ò–°"""
    try:
        result = await fns_service.get_and_process_fns_documents(db)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        log_entry = ProcessingLog(
            task_id="manual_real_check",
            total_documents=result["total_documents"],
            fns_documents=result["fns_documents"],
            status="success" if "error" not in result else "error"
        )
        db.add(log_entry)
        db.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        global last_check_time, processed_documents_count
        last_check_time = datetime.now()
        processed_documents_count += result["fns_documents"]

        return result
    except Exception as e:
        logger.error(f"Real check failed: {e}")
        raise HTTPException(status_code=500, detail=f"Check failed: {e}")


# ===============================
# –û–°–ù–û–í–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´
# ===============================

@router.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "FNS Documents Monitor API",
        "version": "1.0.0",
        "endpoints": {
            "documents": "/api/v1/documents/",
            "check_now": "/api/v1/check-now",
            "status": "/api/v1/status",
            "dashboard": "/api/v1/dashboard",
            "logs": "/api/v1/logs/",
            "test_sbis": "/api/v1/test-sbis"
        }
    }


@router.get("/documents/", response_model=List[MailDocumentSchema])
def get_documents(
        skip: int = 0,
        limit: int = 100,
        fns_only: bool = False,
        days_back: Optional[int] = None,
        db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π

    - **fns_only**: —Ç–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç –§–ù–°
    - **days_back**: –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
    - **skip/limit**: –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    """
    query = db.query(MailDocument)

    # –§–∏–ª—å—Ç—Ä –ø–æ –§–ù–°
    if fns_only:
        query = query.filter(MailDocument.is_from_fns == True)

    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    if days_back:
        start_date = datetime.now() - timedelta(days=days_back)
        query = query.filter(MailDocument.date >= start_date)

    documents = query.order_by(MailDocument.date.desc()).offset(skip).limit(limit).all()
    return documents


@router.post("/check-now")
async def check_now(db: Session = Depends(get_db)):
    """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –°–ë–ò–°"""
    try:
        logger.info("API –∑–∞–ø—Ä–æ—Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –°–ë–ò–°")

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Celery
        try:
            task = check_fns_mails.delay()
            result = task.get(timeout=60)
        except Exception as celery_error:
            logger.warning(f"Celery –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {celery_error}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤")
            result = await run_real_check(db)

        return {
            "status": "success",
            "result": {
                "new_documents": result.get('fns_documents', 0),
                "total_processed": result.get('total_documents', 0)
            },
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}")
        return {
            "status": "error",
            "detail": str(e),
            "timestamp": datetime.now().isoformat()
        }


@router.get("/logs/", response_model=List[ProcessingLogResponse])
def get_processing_logs(
        skip: int = 0,
        limit: int = 50,
        db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    logs = db.query(ProcessingLog).order_by(
        ProcessingLog.processed_at.desc()
    ).offset(skip).limit(limit).all()
    return logs


# ===============================
# –°–ò–°–¢–ï–ú–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´
# ===============================

@router.post("/check-all")
async def check_all_documents(db: Session = Depends(get_db)):
    """
    –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–µ—Ç

    –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç:
    - –ü–æ–ª—É—á–∞–µ—Ç –í–°–ï –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–µ—Ç –∏–∑ –°–ë–ò–°
    - –§–∏–ª—å—Ç—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç –§–ù–°
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    """
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ 10 –ª–µ—Ç")
        start_time = datetime.now()

        # 10 –ª–µ—Ç = –ø—Ä–∏–º–µ—Ä–Ω–æ 3650 –¥–Ω–µ–π
        days_back = 3650

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Celery (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            from app.tasks.celery_tasks import check_all_documents_task
            task = check_all_documents_task.delay(days_back)
            result = task.get(timeout=300)  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ Celery")
        except Exception as celery_error:
            logger.warning(f"‚ö†Ô∏è Celery –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {celery_error}, –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–ø—Ä—è–º—É—é")
            result = await run_full_check(db, days_back)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        global last_check_time, processed_documents_count
        last_check_time = datetime.now()
        processed_documents_count += result.get('fns_documents', 0)

        # –°—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_time = (datetime.now() - start_time).total_seconds()

        return {
            "status": "success",
            "message": "–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ 10 –ª–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
            "period": "10 –ª–µ—Ç (3650 –¥–Ω–µ–π)",
            "execution_time_seconds": round(execution_time, 2),
            "result": {
                "total_documents_found": result.get('total_documents', 0),
                "fns_documents_found": result.get('fns_documents', 0),
                "new_documents_saved": result.get('new_documents', 0),
                "duplicates_skipped": result.get('total_documents', 0) - result.get('new_documents', 0)
            },
            "statistics": await get_database_statistics(db),
            "timestamp": datetime.now().isoformat()
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}")
        return {
            "status": "error",
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏",
            "error_details": str(e),
            "timestamp": datetime.now().isoformat()
        }


# –î–æ–±–∞–≤—å —ç—Ç—É –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ routes.py
async def run_full_check(db: Session, days_back: int):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    try:
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞ {days_back} –¥–Ω–µ–π")

        result = await fns_service.get_and_process_fns_documents(db, days_back)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        log_entry = ProcessingLog(
            task_id=f"full_check_{days_back}_days",
            total_documents=result["total_documents"],
            fns_documents=result["fns_documents"],
            status="success" if "error" not in result else "error"
        )
        db.add(log_entry)
        db.commit()

        logger.info(f"‚úÖ –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}")
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"Full check failed: {e}")


async def get_database_statistics(db: Session) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_docs = db.query(MailDocument).count()
        fns_docs = db.query(MailDocument).filter(MailDocument.is_from_fns == True).count()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        now = datetime.now()
        last_30_days = db.query(MailDocument).filter(
            MailDocument.date >= now - timedelta(days=30)
        ).count()

        last_year = db.query(MailDocument).filter(
            MailDocument.date >= now - timedelta(days=365)
        ).count()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –§–ù–° –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        fns_last_30_days = db.query(MailDocument).filter(
            MailDocument.is_from_fns == True,
            MailDocument.date >= now - timedelta(days=30)
        ).count()

        return {
            "total_documents": total_docs,
            "fns_documents": fns_docs,
            "regular_documents": total_docs - fns_docs,
            "last_30_days": last_30_days,
            "last_year": last_year,
            "fns_last_30_days": fns_last_30_days,
            "fns_percentage": round((fns_docs / total_docs * 100) if total_docs > 0 else 0, 2)
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {"error": str(e)}

@router.get("/status")
async def get_system_status(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Celery
        celery_status = "unknown"
        try:
            inspect = celery_app.control.inspect()
            stats = inspect.stats()
            celery_status = "active" if stats else "inactive"
        except:
            celery_status = "error"

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
        total_docs = db.query(MailDocument).count()
        fns_docs = db.query(MailDocument).filter(MailDocument.is_from_fns == True).count()

        global last_check_time, processed_documents_count
        return {
            "status": "active",
            "celery_status": celery_status,
            "last_check": last_check_time.isoformat() if last_check_time else None,
            "processed_documents_count": processed_documents_count,
            "statistics": {
                "total_documents": total_docs,
                "fns_documents": fns_docs,
                "regular_documents": total_docs - fns_docs
            },
            "config": {
                "check_interval_minutes": settings.CHECK_INTERVAL_MINUTES,
                "documents_period_days": settings.DOCUMENTS_PERIOD_DAYS,
                "sbis_login": settings.SBIS_LOGIN
            },
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/test-sbis")
async def test_sbis_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –°–ë–ò–°"""
    try:
        from app.services.sbis_client import SBISClient

        async with SBISClient() as client:
            auth_success = await client.authenticate()

            if not auth_success:
                return {
                    "status": "error",
                    "message": "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –°–ë–ò–°",
                    "timestamp": datetime.now().isoformat()
                }

            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
            documents = await client.get_fns_documents(days_back=30)

            return {
                "status": "success",
                "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –°–ë–ò–° —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "documents_found": len(documents),
                "sample_documents": documents[:3] if documents else [],
                "timestamp": datetime.now().isoformat()
            }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –°–ë–ò–°: {str(e)}")
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –°–ë–ò–°: {str(e)}",
            "timestamp": datetime.now().isoformat()
        }




# ===============================
# –£–¢–ò–õ–ò–¢–´ –ò –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï
# ===============================

@router.get("/dashboard", response_class=HTMLResponse)
async def enhanced_dashboard(request: Request):
    """–í–µ–±-–¥–∞—à–±–æ—Ä–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π"""
    return templates.TemplateResponse(
        "dashboard_enhanced.html",
        {"request": request}
    )